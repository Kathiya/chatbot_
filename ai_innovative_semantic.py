# -*- coding: utf-8 -*-
"""AI_innovative_semantic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GX6jooTj4goJeBRC5GaEObfEaJi7Ds6Y
"""

#from google.colab import drive
#drive.mount('/content/gdrive')

#%cd '/content/drive/My Drive/sem-7/AI/flaskapp'



#!pip install flask-ngrok
#!pip install flask_sqlalchemy















from keras.engine.topology import Layer
from keras import initializers as initializers, regularizers, constraints
from keras import backend as K
def dot_product(x, kernel):
    """
    Wrapper for dot product operation, in order to be compatible with both
    Theano and Tensorflow
    Args:
        x (): input
        kernel (): weights
    Returns:
    """
    if K.backend() == 'tensorflow':
        return K.squeeze(K.dot(x, K.expand_dims(kernel)), axis=-1)
    else:
        return K.dot(x, kernel)


class AttentionWithContext(Layer):
    """
    Attention operation, with a context/query vector, for temporal data.
    Supports Masking.
    Follows the work of Yang et al. [https://www.cs.cmu.edu/~diyiy/docs/naacl16.pdf]
    "Hierarchical Attention Networks for Document Classification"
    by using a context vector to assist the attention
    # Input shape
        3D tensor with shape: `(samples, steps, features)`.
    # Output shape
        2D tensor with shape: `(samples, features)`.
    How to use:
    Just put it on top of an RNN Layer (GRU/LSTM/SimpleRNN) with return_sequences=True.
    The dimensions are inferred based on the output shape of the RNN.
    Note: The layer has been tested with Keras 2.0.6
    Example:
        model.add(LSTM(64, return_sequences=True))
        model.add(AttentionWithContext())
        # next add a Dense layer (for classification/regression) or whatever...
    """

    def __init__(self,
                 W_regularizer=None, u_regularizer=None, b_regularizer=None,
                 W_constraint=None, u_constraint=None, b_constraint=None,
                 bias=True, **kwargs):

        self.supports_masking = True
        self.init = initializers.get('glorot_uniform')

        self.W_regularizer = regularizers.get(W_regularizer)
        self.u_regularizer = regularizers.get(u_regularizer)
        self.b_regularizer = regularizers.get(b_regularizer)

        self.W_constraint = constraints.get(W_constraint)
        self.u_constraint = constraints.get(u_constraint)
        self.b_constraint = constraints.get(b_constraint)

        self.bias = bias
        super(AttentionWithContext, self).__init__(**kwargs)

    def build(self, input_shape):
        assert len(input_shape) == 3

        self.W = self.add_weight(shape=(input_shape[-1], input_shape[-1],),
                                 initializer=self.init,
                                 name='{}_W'.format(self.name),
                                 regularizer=self.W_regularizer,
                                 constraint=self.W_constraint)
        if self.bias:
            self.b = self.add_weight(shape=(input_shape[-1],),
                                     initializer='zero',
                                     name='{}_b'.format(self.name),
                                     regularizer=self.b_regularizer,
                                     constraint=self.b_constraint)

        self.u = self.add_weight(shape=(input_shape[-1],),
                                 initializer=self.init,
                                 name='{}_u'.format(self.name),
                                 regularizer=self.u_regularizer,
                                 constraint=self.u_constraint)

        super(AttentionWithContext, self).build(input_shape)

    def compute_mask(self, input, input_mask=None):
        # do not pass the mask to the next layers
        return None

    def call(self, x, mask=None):
        uit = dot_product(x, self.W)

        if self.bias:
            uit += self.b

        uit = K.tanh(uit)
        ait = dot_product(uit, self.u)

        a = K.exp(ait)

        # apply mask after the exp. will be re-normalized next
        if mask is not None:
            # Cast the mask to floatX to avoid float64 upcasting in theano
            a *= K.cast(mask, K.floatx())

        # in some cases especially in the early stages of training the sum may be almost zero
        # and this results in NaN's. A workaround is to add a very small positive number Îµ to the sum.
        # a /= K.cast(K.sum(a, axis=1, keepdims=True), K.floatx())
        a /= K.cast(K.sum(a, axis=1, keepdims=True) + K.epsilon(), K.floatx())

        a = K.expand_dims(a)
        weighted_input = x * a
        return K.sum(weighted_input, axis=1)

    def compute_output_shape(self, input_shape):
        return input_shape[0], input_shape[-1]
    def get_config(self):
        config = super().get_config().copy()
        config.update({
                'W_regularizer': self.W_regularizer,
                'u_regularizer': self.u_regularizer,
                'b_regularizer': self.b_regularizer,
                'W_constraint': self.W_constraint,
                'u_constraint': self.u_constraint,
                'b_constraint': self.b_constraint,
                'bias': self.bias,
        })
        return config
def create_custom_objects():
      instance_holder = {"instance": None}

      class ClassWrapper(AttentionWithContext):
          def __init__(self, *args, **kwargs):
              instance_holder["instance"] = self
              super(ClassWrapper, self).__init__(*args, **kwargs)

      def loss(*args):
          method = getattr(instance_holder["instance"], "loss_function")
          return method(*args)

      def accuracy(*args):
          method = getattr(instance_holder["instance"], "accuracy")
          return method(*args)
      return {"ClassWrapper": ClassWrapper ,"AttentionWithContext": ClassWrapper, "loss": loss,
              "accuracy":accuracy}

import re
import numpy as np
from keras.preprocessing.text import Tokenizer,  text_to_word_sequence
def clean_str(string):
    """
    Tokenization/string cleaning for all datasets except for SST.
    Original taken from https://github.com/yoonkim/CNN_sentence/blob/master/process_data.py
    """
    string = re.sub(r"[^A-Za-z0-9(),!?\'\`]", " ", string)
    string = re.sub(r"\'s", " \'s", string)
    string = re.sub(r"\'ve", " \'ve", string)
    string = re.sub(r"n\'t", " n\'t", string)
    string = re.sub(r"\'re", " \'re", string)
    string = re.sub(r"\'d", " \'d", string)
    string = re.sub(r"\'ll", " \'ll", string)
    string = re.sub(r",", " , ", string)
    string = re.sub(r"!", " ! ", string)
    string = re.sub(r"\(", " ( ", string)
    string = re.sub(r"\)", " ) ", string)
    string = re.sub(r"\?", " ? ", string)
    string = re.sub(r"\s{2,}", " ", string)

    return string.strip().lower()

def prepare_data(essay_list,max_senten_len=300,max_senten_num=1,embed_size=300,VALIDATION_SPLIT = 0.2):
  paras = []
  labels = []
  texts = []
  import nltk
  nltk.download('punkt')
  from nltk import tokenize
  sent_lens = []
  sent_nums = []
  for idx in range(len(essay_list)):
      text = clean_str(essay_list[idx])
      texts.append(text)
      sentences = tokenize.sent_tokenize(text)
      sent_nums.append(len(sentences))
      for sent in sentences:
          sent_lens.append(len(text_to_word_sequence(sent)))
      paras.append(sentences)
  tokenizer = Tokenizer( oov_token=True)
  tokenizer.fit_on_texts(essay_list)
  data = np.zeros((len(texts), max_senten_num, max_senten_len), dtype='int32')
  for i, sentences in enumerate(paras):
      for j, sent in enumerate(sentences):
          if j< max_senten_num:
              wordTokens = text_to_word_sequence(sent)
              k=0
              for _, word in enumerate(wordTokens):
                  try:
                      if k<max_senten_len and tokenizer.word_index[word]<10000000000:
                          data[i,j,k] = tokenizer.word_index[word]
                          k=k+1
                  except:
                      print(word)
                      pass
  word_index = tokenizer.word_index
  print('Total %s unique tokens.' % len(word_index))
  return data





from flask import Flask, redirect, url_for, request, render_template, flash 
#from flask_ngrok import run_with_ngrok

from flask_sqlalchemy import SQLAlchemy
from keras.models import load_model
from AttentionWithContext import create_custom_objects
import numpy as np
import datetime
import pytz
model = load_model('AES_IMDB.h5',custom_objects=create_custom_objects())

def predict(str):
  data = prepare_data(str)
  pre = model.predict(data)
  pre = np.argmax(pre,axis=1)
  return pre


app = Flask(__name__,template_folder='templates',static_folder='static')
#run_with_ngrok(app)
app.config['SQLALCHEMY_DATABASE_URI']='sqlite:///chatbot.sqlite3'
app.config['SECRET_KEY']="random string"
db = SQLAlchemy(app)

current_time = datetime.datetime.now(pytz.timezone('Asia/Kolkata'))
current_date = str(current_time.day) +"/"+ str(current_time.month) +"/"+ str(current_time.year)
current_hours = str(current_time.hour) +":"+ str(current_time.minute) +":"+ str(current_time.second)


from chatbot import *
is_turbo = False
chatbot = Chatbot(is_turbo)

class chatdetails(db.Model):

    id = db.Column('message_id', db.Integer, primary_key=True)
    sender = db.Column(db.String(10))
    chattext = db.Column(db.String(100))
    date = db.Column(db.String(20))
    time = db.Column(db.String(20))

    def __init__(self, sender, chattext, date, time):
        self.sender = sender
        self.chattext = chattext
        self.date = date
        self.time = time

#@app.route('/')
#def index():
#  return render_template('chatbot.html')
  #return render_template('home.html')
  #return '<html><body><form action = "/login" method = "POST"><p>Enter Name:</p><p><textarea name="nm" rows="4" cols="50"></textarea></p><p><input type = "submit" value = "submit" /></p></form> </body></html>'


@app.route('/review', methods= ['POST', 'GET']) 
def review():
    return render_template('moviereview.html') 


@app.route('/login', methods= ['POST', 'GET'])
def login(): 
   if request.method == 'POST': 
      user = request.form['nm']
      #r = request.get(user)
      pre = predict([user])
      print(pre)
      if pre == 1 : 
         flash('Thanks for sharing your feedback. Weâre sorry your experience didnât match your expectations. It was an uncommon instance and weâll do better','NEG')
         return render_template('moviereview.html')
      else :
         flash('Thank you for the great review!  Weâre so happy you loved the Movie and canât wait to have you back','POS')
         return render_template('moviereview.html')
      
   else: 
      user = request.args.get('nm') 
      return redirect(url_for('success',name = user)) 

@app.route('/', methods=['GET','POST'])
def chatbotexecute():
    if request.method == 'POST':
        if not request.form['chattext']:
            flash('Please enter all the fields','error')
        else:
            chatdetail = chatdetails('User',request.form['chattext'],current_date,current_hours)
            db.session.add(chatdetail)/''
            db.session.commit()
            chatdetailbot = chatdetails('Bot', str(chatbot.process(request.form['chattext'])), current_date, current_hours)
            db.session.add(chatdetailbot)
            db.session.commit()
            return redirect(url_for('chatbotexecute'))
    return render_template('chatbot.html', chattingdetails = chatdetails.query.all())

if __name__ == '__main__':
  app.run()

